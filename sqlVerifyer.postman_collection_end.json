{
	"info": {
		"_postman_id": "3f023e69-6787-4528-8951-dbc7775ed596",
		"name": "sqlVerifyer",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24818302",
		"_collection_link": "https://cloudy-eclipse-940216.postman.co/workspace/bb391087-b96b-4911-b8a2-d911be130eac/collection/24818302-3f023e69-6787-4528-8951-dbc7775ed596?action=share&source=collection_link&creator=24818302"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Register - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									" \r",
									"pm.test(\"Server is present in response header\", function () {\r",
									"    pm.response.to.have.header(\"Server\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				},
				{
					"name": "Register - with existed login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Падающий тест - баг\r",
									"// pm.test(\"Error message shows\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.detail).to.eql(\"Login name already used!\");\r",
									"// });\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"kosTeacher\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				},
				{
					"name": "Register - with existed email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Падающий тест - баг\r",
									"// pm.test(\"Error message shows\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.detail).to.eql(\"Email is already in use!\");\r",
									"// });\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"{{$randomUserName}}\",\r\n    \"email\": \"k.kanstantin@yandex.com\",\r\n    \"password\": \"12345\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				},
				{
					"name": "Register - with empty data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body have an error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Not to be blank message shows\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var errorMessages = jsonData.fieldErrors.map(function (error) {\r",
									"        return error.message;\r",
									"    });\r",
									"    pm.expect(errorMessages).to.include(\"must not be blank\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"12345\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				},
				{
					"name": "Register - with invalid login length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body have an error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Size error message shows\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.fieldErrors[0].message).to.eql(\"size must be between 1 and 50\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"graymorningbytheseathewindliftedthewaveshighsanddancedintheembraceoftherisingsunwhilefishermeneagerlyawaitedtheunveilingofthesestreasurestoexperiencetheunseensplendorofamomentfilledwiththescentofsaltandfreess\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"12345\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				},
				{
					"name": "Register - with invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body have an error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Well-formed email address error message shows\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.fieldErrors[0].message).to.eql(\"must be a well-formed email address\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"{{$randomUserName}}\",\r\n    \"email\": \"example@@yandex.com\",\r\n    \"password\": \"12345\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				},
				{
					"name": "Register - with short password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body have an error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Size password error message shows\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.fieldErrors[0].message).to.eql(\"size must be between 4 and 100\") && \r",
									"    pm.expect(jsonData.fieldErrors[0].field).to.eql(\"password\")\r",
									"    ;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"login\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"123\",\r\n    \"langKey\": \"en\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/register"
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login - Valid student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userStudentName}}\",\r\n  \"password\": \"{{userStudentPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Login - Valid teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userTeacherName}}\",\r\n  \"password\": \"{{userTeacherPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Login - Invalid - empty creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// закостылим мэссаги чтобы не падали (поменяем номера массива)\r",
									"\r",
									"pm.test(\"password message shows\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.fieldErrors[1].field).to.eql(\"password\");\r",
									"});\r",
									"\r",
									"pm.test(\"username message shows\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.fieldErrors[0].field).to.eql(\"username\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Login - Invalid - random name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Title is Unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Detail is Bad credentials\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail).to.eql(\"Bad credentials\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomFullName}}\",\r\n  \"password\": \"{{userTeacherPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Login - Invalid - random password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Title is Unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Detail is Bad credentials\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail).to.eql(\"Bad credentials\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userTeacherName}}\",\r\n  \"password\": \"{{$randomWord}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Login - Valid admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{adminName}}\",\r\n  \"password\": \"{{adminPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create task (admin)",
			"item": [
				{
					"name": "Smoke test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomCompanyName}}\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Empty title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomCompanyName}}\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Empty title + body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Empty body + answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"\",\r\n  \"answer\": \"\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Empty answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomCompanyName}}\",\r\n  \"answer\": \"\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Empty answer + title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomCompanyName}}\",\r\n  \"answer\": \"\",\r\n  \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "All fields are empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"\",\r\n  \"answer\": \"\",\r\n  \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify latin text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomLoremParagraph}}\",\r\n  \"answer\": \"{{$randomLoremParagraph}}\",\r\n  \"title\": \"{{$randomLoremParagraph}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify cyrillic text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\",\r\n  \"answer\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\",\r\n  \"title\": \"Съешь ещё этих мягких французских булок, да выпей же чаю.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify numeric values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomPhoneNumber}}\",\r\n  \"answer\": \"{{$randomBankAccount}}\",\r\n  \"title\": \"{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"!№;%:?*()_+!@#$%^&*()_+ №;%:\\\\|/{}[]<>?\",\r\n    \"answer\": \"!№;%:?*()_+!@#$%^&*()_+ №;%:?*()_+!@#$%^&*()_+ \\\\|/{}[]<>?\",\r\n    \"title\": \"!№;%:?*()_+!@#$%^&*()_+ №;%:?*()_+!@#$%^&*()_+ \\\\|/{}[]<>?\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify emoji",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"😀\",\r\n  \"answer\": \"😀🤍\",\r\n  \"title\": \"❤️‍🩹🧡 💛 💚 💙 🤎 🤍\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify numeric values Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomPhoneNumber}}\",\r\n  \"answer\": \"{{$randomBankAccount}}\",\r\n  \"title\": \"{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify mixed values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"😀🤍{{$randomPhoneNumber}}  ()_+ №; {{$randomStreetAddress}}\",\r\n  \"answer\": \"{{$randomBankAccount}}😀🤍  ()_+ №; Съешь ещё этих мягких французских булок, да выпей же чаю yfsdf\",\r\n  \"title\": \"  ()_+ №; 🤍{{$randomInt}}😀 {{$randomDatePast}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Creation with CSV data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{csvTextData}}\",\r\n  \"answer\": \"{{csvAnswerData}}\",\r\n  \"title\": \"{{csvTitleData}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Verify smoke test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var expectedSmokeText = pm.variables.get('smokeText');\r",
									"\r",
									"pm.test(\"Проверим содержимое поля text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.text).to.eql(expectedSmokeText);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Create task (teacher+student)",
			"item": [
				{
					"name": "Login - Valid student Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userStudentName}}\",\r\n  \"password\": \"{{userStudentPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Forbidden acsess  test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"test\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Login - Valid teacher Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userTeacherName}}\",\r\n  \"password\": \"{{userTeacherPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Forbidden acsess  test Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"test\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				}
			]
		},
		{
			"name": "Edit and del task via admin",
			"item": [
				{
					"name": "Login - Valid admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{adminName}}\",\r\n  \"password\": \"{{adminPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Verify full editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"is EDITED?\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"EDITED\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{taskId}}\",\r\n    \"text\": \"<<<EDITED>>>\",\r\n    \"answer\": \" EDITED answer \",\r\n    \"title\": \" EDITED title\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Verify partly editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"answer field is patched\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.answer).to.eql(\"Patched text\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{taskId}}\",\r\n    \"answer\": \"Patched text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Full Editing with CSV data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{taskId}}\",\r\n  \"text\": \"{{csvTextData}}\",\r\n  \"answer\": \"{{csvAnswerData}}\",\r\n  \"title\": \"{{csvTitleData}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Editing with CSV data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{taskId}}\",\r\n  \"text\": \"{{csvTextData}}\",\r\n  \"answer\": \"{{csvAnswerData}}\",\r\n  \"title\": \"{{csvTitleData}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Verify editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that task is not deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.text).to.eql('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Delete a task by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Delete verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that task is deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql('Not Found');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Edit and Delete task via teacher",
			"item": [
				{
					"name": "Smoke test (create task for restr.delete verify)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"smokeText\", pm.response.json().text);\r",
									"\r",
									"pm.collectionVariables.set(\"taskId\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"{{$randomCompanyName}}\",\r\n  \"answer\": \"test\",\r\n  \"title\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks"
					},
					"response": []
				},
				{
					"name": "Login - Valid teacher Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userTeacherName}}\",\r\n  \"password\": \"{{userTeacherPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Restricted deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Restricted part editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Restricted full editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Verify restricted deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that task is not deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.text).to.eql('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Edit and Delete task via studentCopy",
			"item": [
				{
					"name": "Login - Valid Student Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains token\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id_token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"token\", pm.response.json().id_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userStudentName}}\",\r\n  \"password\": \"{{userStudentPassword}}\",\r\n  \"rememberMe\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/authenticate"
					},
					"response": []
				},
				{
					"name": "Restricted deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Restricted part editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Restricted full editing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				},
				{
					"name": "Verify restricted deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that task is not deleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof jsonData.text).to.eql('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/tasks/{{taskId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "authorities",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/api/authorities"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://sqlverifier-live-6e21ca0ed768.herokuapp.com",
			"type": "string"
		},
		{
			"key": "adminName",
			"value": "admin_automation",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "admin_automation",
			"type": "string"
		},
		{
			"key": "userStudentName",
			"value": "kosStudent",
			"type": "string"
		},
		{
			"key": "userStudentPassword",
			"value": "12345",
			"type": "string"
		},
		{
			"key": "userTeacherName",
			"value": "koas",
			"type": "string"
		},
		{
			"key": "userTeacherPassword",
			"value": "1234",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "taskId",
			"value": ""
		},
		{
			"key": "smokeText",
			"value": "smokeText"
		},
		{
			"key": "csvTextData",
			"value": "csvTextData"
		},
		{
			"key": "csvAnswerData",
			"value": "csvAnswerData"
		},
		{
			"key": "csvTitleData",
			"value": "csvTitleData"
		}
	]
}